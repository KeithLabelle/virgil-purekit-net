// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Phe.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Phe {

  /// <summary>Holder for reflection information generated from Phe.proto</summary>
  public static partial class PheReflection {

    #region Descriptor
    /// <summary>File descriptor for Phe.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PheReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglQaGUucHJvdG8SA3BoZSIyCgdLZXlwYWlyEhIKCnB1YmxpY19rZXkYASAB",
            "KAwSEwoLcHJpdmF0ZV9rZXkYAiABKAwiQgoQRW5yb2xsbWVudFJlY29yZBIK",
            "CgJucxgBIAEoDBIKCgJuYxgCIAEoDBIKCgJ0MBgDIAEoDBIKCgJ0MRgEIAEo",
            "DCJOCg5Qcm9vZk9mU3VjY2VzcxINCgV0ZXJtMRgBIAEoDBINCgV0ZXJtMhgC",
            "IAEoDBINCgV0ZXJtMxgDIAEoDBIPCgdibGluZF94GAQgASgMImsKC1Byb29m",
            "T2ZGYWlsEg0KBXRlcm0xGAEgASgMEg0KBXRlcm0yGAIgASgMEg0KBXRlcm0z",
            "GAMgASgMEg0KBXRlcm00GAQgASgMEg8KB2JsaW5kX2EYBSABKAwSDwoHYmxp",
            "bmRfYhgGIAEoDCIjCgtVcGRhdGVUb2tlbhIJCgFhGAEgASgMEgkKAWIYAiAB",
            "KAwiXAoSRW5yb2xsbWVudFJlc3BvbnNlEgoKAm5zGAEgASgMEgoKAmMwGAIg",
            "ASgMEgoKAmMxGAMgASgMEiIKBXByb29mGAQgASgLMhMucGhlLlByb29mT2ZT",
            "dWNjZXNzIi8KFVZlcmlmeVBhc3N3b3JkUmVxdWVzdBIKCgJucxgBIAEoDBIK",
            "CgJjMBgCIAEoDCKEAQoWVmVyaWZ5UGFzc3dvcmRSZXNwb25zZRILCgNyZXMY",
            "ASABKAgSCgoCYzEYAiABKAwSJgoHc3VjY2VzcxgDIAEoCzITLnBoZS5Qcm9v",
            "Zk9mU3VjY2Vzc0gAEiAKBGZhaWwYBCABKAsyEC5waGUuUHJvb2ZPZkZhaWxI",
            "AEIHCgVwcm9vZmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Phe.Keypair), global::Phe.Keypair.Parser, new[]{ "PublicKey", "PrivateKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Phe.EnrollmentRecord), global::Phe.EnrollmentRecord.Parser, new[]{ "Ns", "Nc", "T0", "T1" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Phe.ProofOfSuccess), global::Phe.ProofOfSuccess.Parser, new[]{ "Term1", "Term2", "Term3", "BlindX" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Phe.ProofOfFail), global::Phe.ProofOfFail.Parser, new[]{ "Term1", "Term2", "Term3", "Term4", "BlindA", "BlindB" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Phe.UpdateToken), global::Phe.UpdateToken.Parser, new[]{ "A", "B" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Phe.EnrollmentResponse), global::Phe.EnrollmentResponse.Parser, new[]{ "Ns", "C0", "C1", "Proof" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Phe.VerifyPasswordRequest), global::Phe.VerifyPasswordRequest.Parser, new[]{ "Ns", "C0" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Phe.VerifyPasswordResponse), global::Phe.VerifyPasswordResponse.Parser, new[]{ "Res", "C1", "Success", "Fail" }, new[]{ "Proof" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Keypair : pb::IMessage<Keypair> {
    private static readonly pb::MessageParser<Keypair> _parser = new pb::MessageParser<Keypair>(() => new Keypair());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Keypair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Phe.PheReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Keypair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Keypair(Keypair other) : this() {
      publicKey_ = other.publicKey_;
      privateKey_ = other.privateKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Keypair Clone() {
      return new Keypair(this);
    }

    /// <summary>Field number for the "public_key" field.</summary>
    public const int PublicKeyFieldNumber = 1;
    private pb::ByteString publicKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "private_key" field.</summary>
    public const int PrivateKeyFieldNumber = 2;
    private pb::ByteString privateKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PrivateKey {
      get { return privateKey_; }
      set {
        privateKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Keypair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Keypair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PublicKey != other.PublicKey) return false;
      if (PrivateKey != other.PrivateKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (PrivateKey.Length != 0) hash ^= PrivateKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PublicKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PublicKey);
      }
      if (PrivateKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PrivateKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
      }
      if (PrivateKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PrivateKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Keypair other) {
      if (other == null) {
        return;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      if (other.PrivateKey.Length != 0) {
        PrivateKey = other.PrivateKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PublicKey = input.ReadBytes();
            break;
          }
          case 18: {
            PrivateKey = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnrollmentRecord : pb::IMessage<EnrollmentRecord> {
    private static readonly pb::MessageParser<EnrollmentRecord> _parser = new pb::MessageParser<EnrollmentRecord>(() => new EnrollmentRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnrollmentRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Phe.PheReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnrollmentRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnrollmentRecord(EnrollmentRecord other) : this() {
      ns_ = other.ns_;
      nc_ = other.nc_;
      t0_ = other.t0_;
      t1_ = other.t1_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnrollmentRecord Clone() {
      return new EnrollmentRecord(this);
    }

    /// <summary>Field number for the "ns" field.</summary>
    public const int NsFieldNumber = 1;
    private pb::ByteString ns_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ns {
      get { return ns_; }
      set {
        ns_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nc" field.</summary>
    public const int NcFieldNumber = 2;
    private pb::ByteString nc_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Nc {
      get { return nc_; }
      set {
        nc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "t0" field.</summary>
    public const int T0FieldNumber = 3;
    private pb::ByteString t0_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString T0 {
      get { return t0_; }
      set {
        t0_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "t1" field.</summary>
    public const int T1FieldNumber = 4;
    private pb::ByteString t1_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString T1 {
      get { return t1_; }
      set {
        t1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnrollmentRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnrollmentRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ns != other.Ns) return false;
      if (Nc != other.Nc) return false;
      if (T0 != other.T0) return false;
      if (T1 != other.T1) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ns.Length != 0) hash ^= Ns.GetHashCode();
      if (Nc.Length != 0) hash ^= Nc.GetHashCode();
      if (T0.Length != 0) hash ^= T0.GetHashCode();
      if (T1.Length != 0) hash ^= T1.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ns.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Ns);
      }
      if (Nc.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Nc);
      }
      if (T0.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(T0);
      }
      if (T1.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(T1);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ns.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Ns);
      }
      if (Nc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Nc);
      }
      if (T0.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(T0);
      }
      if (T1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(T1);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnrollmentRecord other) {
      if (other == null) {
        return;
      }
      if (other.Ns.Length != 0) {
        Ns = other.Ns;
      }
      if (other.Nc.Length != 0) {
        Nc = other.Nc;
      }
      if (other.T0.Length != 0) {
        T0 = other.T0;
      }
      if (other.T1.Length != 0) {
        T1 = other.T1;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Ns = input.ReadBytes();
            break;
          }
          case 18: {
            Nc = input.ReadBytes();
            break;
          }
          case 26: {
            T0 = input.ReadBytes();
            break;
          }
          case 34: {
            T1 = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProofOfSuccess : pb::IMessage<ProofOfSuccess> {
    private static readonly pb::MessageParser<ProofOfSuccess> _parser = new pb::MessageParser<ProofOfSuccess>(() => new ProofOfSuccess());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProofOfSuccess> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Phe.PheReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProofOfSuccess() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProofOfSuccess(ProofOfSuccess other) : this() {
      term1_ = other.term1_;
      term2_ = other.term2_;
      term3_ = other.term3_;
      blindX_ = other.blindX_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProofOfSuccess Clone() {
      return new ProofOfSuccess(this);
    }

    /// <summary>Field number for the "term1" field.</summary>
    public const int Term1FieldNumber = 1;
    private pb::ByteString term1_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Term1 {
      get { return term1_; }
      set {
        term1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "term2" field.</summary>
    public const int Term2FieldNumber = 2;
    private pb::ByteString term2_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Term2 {
      get { return term2_; }
      set {
        term2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "term3" field.</summary>
    public const int Term3FieldNumber = 3;
    private pb::ByteString term3_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Term3 {
      get { return term3_; }
      set {
        term3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "blind_x" field.</summary>
    public const int BlindXFieldNumber = 4;
    private pb::ByteString blindX_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BlindX {
      get { return blindX_; }
      set {
        blindX_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProofOfSuccess);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProofOfSuccess other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Term1 != other.Term1) return false;
      if (Term2 != other.Term2) return false;
      if (Term3 != other.Term3) return false;
      if (BlindX != other.BlindX) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Term1.Length != 0) hash ^= Term1.GetHashCode();
      if (Term2.Length != 0) hash ^= Term2.GetHashCode();
      if (Term3.Length != 0) hash ^= Term3.GetHashCode();
      if (BlindX.Length != 0) hash ^= BlindX.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Term1.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Term1);
      }
      if (Term2.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Term2);
      }
      if (Term3.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Term3);
      }
      if (BlindX.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(BlindX);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Term1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Term1);
      }
      if (Term2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Term2);
      }
      if (Term3.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Term3);
      }
      if (BlindX.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BlindX);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProofOfSuccess other) {
      if (other == null) {
        return;
      }
      if (other.Term1.Length != 0) {
        Term1 = other.Term1;
      }
      if (other.Term2.Length != 0) {
        Term2 = other.Term2;
      }
      if (other.Term3.Length != 0) {
        Term3 = other.Term3;
      }
      if (other.BlindX.Length != 0) {
        BlindX = other.BlindX;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Term1 = input.ReadBytes();
            break;
          }
          case 18: {
            Term2 = input.ReadBytes();
            break;
          }
          case 26: {
            Term3 = input.ReadBytes();
            break;
          }
          case 34: {
            BlindX = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProofOfFail : pb::IMessage<ProofOfFail> {
    private static readonly pb::MessageParser<ProofOfFail> _parser = new pb::MessageParser<ProofOfFail>(() => new ProofOfFail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProofOfFail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Phe.PheReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProofOfFail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProofOfFail(ProofOfFail other) : this() {
      term1_ = other.term1_;
      term2_ = other.term2_;
      term3_ = other.term3_;
      term4_ = other.term4_;
      blindA_ = other.blindA_;
      blindB_ = other.blindB_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProofOfFail Clone() {
      return new ProofOfFail(this);
    }

    /// <summary>Field number for the "term1" field.</summary>
    public const int Term1FieldNumber = 1;
    private pb::ByteString term1_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Term1 {
      get { return term1_; }
      set {
        term1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "term2" field.</summary>
    public const int Term2FieldNumber = 2;
    private pb::ByteString term2_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Term2 {
      get { return term2_; }
      set {
        term2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "term3" field.</summary>
    public const int Term3FieldNumber = 3;
    private pb::ByteString term3_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Term3 {
      get { return term3_; }
      set {
        term3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "term4" field.</summary>
    public const int Term4FieldNumber = 4;
    private pb::ByteString term4_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Term4 {
      get { return term4_; }
      set {
        term4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "blind_a" field.</summary>
    public const int BlindAFieldNumber = 5;
    private pb::ByteString blindA_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BlindA {
      get { return blindA_; }
      set {
        blindA_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "blind_b" field.</summary>
    public const int BlindBFieldNumber = 6;
    private pb::ByteString blindB_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BlindB {
      get { return blindB_; }
      set {
        blindB_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProofOfFail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProofOfFail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Term1 != other.Term1) return false;
      if (Term2 != other.Term2) return false;
      if (Term3 != other.Term3) return false;
      if (Term4 != other.Term4) return false;
      if (BlindA != other.BlindA) return false;
      if (BlindB != other.BlindB) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Term1.Length != 0) hash ^= Term1.GetHashCode();
      if (Term2.Length != 0) hash ^= Term2.GetHashCode();
      if (Term3.Length != 0) hash ^= Term3.GetHashCode();
      if (Term4.Length != 0) hash ^= Term4.GetHashCode();
      if (BlindA.Length != 0) hash ^= BlindA.GetHashCode();
      if (BlindB.Length != 0) hash ^= BlindB.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Term1.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Term1);
      }
      if (Term2.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Term2);
      }
      if (Term3.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Term3);
      }
      if (Term4.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Term4);
      }
      if (BlindA.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(BlindA);
      }
      if (BlindB.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(BlindB);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Term1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Term1);
      }
      if (Term2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Term2);
      }
      if (Term3.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Term3);
      }
      if (Term4.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Term4);
      }
      if (BlindA.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BlindA);
      }
      if (BlindB.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BlindB);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProofOfFail other) {
      if (other == null) {
        return;
      }
      if (other.Term1.Length != 0) {
        Term1 = other.Term1;
      }
      if (other.Term2.Length != 0) {
        Term2 = other.Term2;
      }
      if (other.Term3.Length != 0) {
        Term3 = other.Term3;
      }
      if (other.Term4.Length != 0) {
        Term4 = other.Term4;
      }
      if (other.BlindA.Length != 0) {
        BlindA = other.BlindA;
      }
      if (other.BlindB.Length != 0) {
        BlindB = other.BlindB;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Term1 = input.ReadBytes();
            break;
          }
          case 18: {
            Term2 = input.ReadBytes();
            break;
          }
          case 26: {
            Term3 = input.ReadBytes();
            break;
          }
          case 34: {
            Term4 = input.ReadBytes();
            break;
          }
          case 42: {
            BlindA = input.ReadBytes();
            break;
          }
          case 50: {
            BlindB = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateToken : pb::IMessage<UpdateToken> {
    private static readonly pb::MessageParser<UpdateToken> _parser = new pb::MessageParser<UpdateToken>(() => new UpdateToken());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateToken> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Phe.PheReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateToken() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateToken(UpdateToken other) : this() {
      a_ = other.a_;
      b_ = other.b_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateToken Clone() {
      return new UpdateToken(this);
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 1;
    private pb::ByteString a_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString A {
      get { return a_; }
      set {
        a_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "b" field.</summary>
    public const int BFieldNumber = 2;
    private pb::ByteString b_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString B {
      get { return b_; }
      set {
        b_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateToken);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateToken other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (A != other.A) return false;
      if (B != other.B) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (A.Length != 0) hash ^= A.GetHashCode();
      if (B.Length != 0) hash ^= B.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (A.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(A);
      }
      if (B.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(B);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (A.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(A);
      }
      if (B.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(B);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateToken other) {
      if (other == null) {
        return;
      }
      if (other.A.Length != 0) {
        A = other.A;
      }
      if (other.B.Length != 0) {
        B = other.B;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            A = input.ReadBytes();
            break;
          }
          case 18: {
            B = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnrollmentResponse : pb::IMessage<EnrollmentResponse> {
    private static readonly pb::MessageParser<EnrollmentResponse> _parser = new pb::MessageParser<EnrollmentResponse>(() => new EnrollmentResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnrollmentResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Phe.PheReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnrollmentResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnrollmentResponse(EnrollmentResponse other) : this() {
      ns_ = other.ns_;
      c0_ = other.c0_;
      c1_ = other.c1_;
      proof_ = other.proof_ != null ? other.proof_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnrollmentResponse Clone() {
      return new EnrollmentResponse(this);
    }

    /// <summary>Field number for the "ns" field.</summary>
    public const int NsFieldNumber = 1;
    private pb::ByteString ns_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ns {
      get { return ns_; }
      set {
        ns_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "c0" field.</summary>
    public const int C0FieldNumber = 2;
    private pb::ByteString c0_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString C0 {
      get { return c0_; }
      set {
        c0_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "c1" field.</summary>
    public const int C1FieldNumber = 3;
    private pb::ByteString c1_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString C1 {
      get { return c1_; }
      set {
        c1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "proof" field.</summary>
    public const int ProofFieldNumber = 4;
    private global::Phe.ProofOfSuccess proof_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Phe.ProofOfSuccess Proof {
      get { return proof_; }
      set {
        proof_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnrollmentResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnrollmentResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ns != other.Ns) return false;
      if (C0 != other.C0) return false;
      if (C1 != other.C1) return false;
      if (!object.Equals(Proof, other.Proof)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ns.Length != 0) hash ^= Ns.GetHashCode();
      if (C0.Length != 0) hash ^= C0.GetHashCode();
      if (C1.Length != 0) hash ^= C1.GetHashCode();
      if (proof_ != null) hash ^= Proof.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ns.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Ns);
      }
      if (C0.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(C0);
      }
      if (C1.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(C1);
      }
      if (proof_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Proof);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ns.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Ns);
      }
      if (C0.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(C0);
      }
      if (C1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(C1);
      }
      if (proof_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Proof);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnrollmentResponse other) {
      if (other == null) {
        return;
      }
      if (other.Ns.Length != 0) {
        Ns = other.Ns;
      }
      if (other.C0.Length != 0) {
        C0 = other.C0;
      }
      if (other.C1.Length != 0) {
        C1 = other.C1;
      }
      if (other.proof_ != null) {
        if (proof_ == null) {
          proof_ = new global::Phe.ProofOfSuccess();
        }
        Proof.MergeFrom(other.Proof);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Ns = input.ReadBytes();
            break;
          }
          case 18: {
            C0 = input.ReadBytes();
            break;
          }
          case 26: {
            C1 = input.ReadBytes();
            break;
          }
          case 34: {
            if (proof_ == null) {
              proof_ = new global::Phe.ProofOfSuccess();
            }
            input.ReadMessage(proof_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class VerifyPasswordRequest : pb::IMessage<VerifyPasswordRequest> {
    private static readonly pb::MessageParser<VerifyPasswordRequest> _parser = new pb::MessageParser<VerifyPasswordRequest>(() => new VerifyPasswordRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VerifyPasswordRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Phe.PheReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyPasswordRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyPasswordRequest(VerifyPasswordRequest other) : this() {
      ns_ = other.ns_;
      c0_ = other.c0_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyPasswordRequest Clone() {
      return new VerifyPasswordRequest(this);
    }

    /// <summary>Field number for the "ns" field.</summary>
    public const int NsFieldNumber = 1;
    private pb::ByteString ns_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ns {
      get { return ns_; }
      set {
        ns_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "c0" field.</summary>
    public const int C0FieldNumber = 2;
    private pb::ByteString c0_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString C0 {
      get { return c0_; }
      set {
        c0_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VerifyPasswordRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VerifyPasswordRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ns != other.Ns) return false;
      if (C0 != other.C0) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ns.Length != 0) hash ^= Ns.GetHashCode();
      if (C0.Length != 0) hash ^= C0.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ns.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Ns);
      }
      if (C0.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(C0);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ns.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Ns);
      }
      if (C0.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(C0);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VerifyPasswordRequest other) {
      if (other == null) {
        return;
      }
      if (other.Ns.Length != 0) {
        Ns = other.Ns;
      }
      if (other.C0.Length != 0) {
        C0 = other.C0;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Ns = input.ReadBytes();
            break;
          }
          case 18: {
            C0 = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VerifyPasswordResponse : pb::IMessage<VerifyPasswordResponse> {
    private static readonly pb::MessageParser<VerifyPasswordResponse> _parser = new pb::MessageParser<VerifyPasswordResponse>(() => new VerifyPasswordResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VerifyPasswordResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Phe.PheReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyPasswordResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyPasswordResponse(VerifyPasswordResponse other) : this() {
      res_ = other.res_;
      c1_ = other.c1_;
      switch (other.ProofCase) {
        case ProofOneofCase.Success:
          Success = other.Success.Clone();
          break;
        case ProofOneofCase.Fail:
          Fail = other.Fail.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyPasswordResponse Clone() {
      return new VerifyPasswordResponse(this);
    }

    /// <summary>Field number for the "res" field.</summary>
    public const int ResFieldNumber = 1;
    private bool res_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Res {
      get { return res_; }
      set {
        res_ = value;
      }
    }

    /// <summary>Field number for the "c1" field.</summary>
    public const int C1FieldNumber = 2;
    private pb::ByteString c1_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString C1 {
      get { return c1_; }
      set {
        c1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Phe.ProofOfSuccess Success {
      get { return proofCase_ == ProofOneofCase.Success ? (global::Phe.ProofOfSuccess) proof_ : null; }
      set {
        proof_ = value;
        proofCase_ = value == null ? ProofOneofCase.None : ProofOneofCase.Success;
      }
    }

    /// <summary>Field number for the "fail" field.</summary>
    public const int FailFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Phe.ProofOfFail Fail {
      get { return proofCase_ == ProofOneofCase.Fail ? (global::Phe.ProofOfFail) proof_ : null; }
      set {
        proof_ = value;
        proofCase_ = value == null ? ProofOneofCase.None : ProofOneofCase.Fail;
      }
    }

    private object proof_;
    /// <summary>Enum of possible cases for the "proof" oneof.</summary>
    public enum ProofOneofCase {
      None = 0,
      Success = 3,
      Fail = 4,
    }
    private ProofOneofCase proofCase_ = ProofOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProofOneofCase ProofCase {
      get { return proofCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProof() {
      proofCase_ = ProofOneofCase.None;
      proof_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VerifyPasswordResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VerifyPasswordResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Res != other.Res) return false;
      if (C1 != other.C1) return false;
      if (!object.Equals(Success, other.Success)) return false;
      if (!object.Equals(Fail, other.Fail)) return false;
      if (ProofCase != other.ProofCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Res != false) hash ^= Res.GetHashCode();
      if (C1.Length != 0) hash ^= C1.GetHashCode();
      if (proofCase_ == ProofOneofCase.Success) hash ^= Success.GetHashCode();
      if (proofCase_ == ProofOneofCase.Fail) hash ^= Fail.GetHashCode();
      hash ^= (int) proofCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Res != false) {
        output.WriteRawTag(8);
        output.WriteBool(Res);
      }
      if (C1.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(C1);
      }
      if (proofCase_ == ProofOneofCase.Success) {
        output.WriteRawTag(26);
        output.WriteMessage(Success);
      }
      if (proofCase_ == ProofOneofCase.Fail) {
        output.WriteRawTag(34);
        output.WriteMessage(Fail);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Res != false) {
        size += 1 + 1;
      }
      if (C1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(C1);
      }
      if (proofCase_ == ProofOneofCase.Success) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Success);
      }
      if (proofCase_ == ProofOneofCase.Fail) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fail);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VerifyPasswordResponse other) {
      if (other == null) {
        return;
      }
      if (other.Res != false) {
        Res = other.Res;
      }
      if (other.C1.Length != 0) {
        C1 = other.C1;
      }
      switch (other.ProofCase) {
        case ProofOneofCase.Success:
          if (Success == null) {
            Success = new global::Phe.ProofOfSuccess();
          }
          Success.MergeFrom(other.Success);
          break;
        case ProofOneofCase.Fail:
          if (Fail == null) {
            Fail = new global::Phe.ProofOfFail();
          }
          Fail.MergeFrom(other.Fail);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Res = input.ReadBool();
            break;
          }
          case 18: {
            C1 = input.ReadBytes();
            break;
          }
          case 26: {
            global::Phe.ProofOfSuccess subBuilder = new global::Phe.ProofOfSuccess();
            if (proofCase_ == ProofOneofCase.Success) {
              subBuilder.MergeFrom(Success);
            }
            input.ReadMessage(subBuilder);
            Success = subBuilder;
            break;
          }
          case 34: {
            global::Phe.ProofOfFail subBuilder = new global::Phe.ProofOfFail();
            if (proofCase_ == ProofOneofCase.Fail) {
              subBuilder.MergeFrom(Fail);
            }
            input.ReadMessage(subBuilder);
            Fail = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
